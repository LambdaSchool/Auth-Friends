[{"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/index.js":"1","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/App.js":"2","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/reportWebVitals.js":"3","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/components/login.js":"4","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/components/friendList.js":"5","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/components/friends.js":"6","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/utils/axiosWithAuth.js":"7","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/utils/PrivateRoute.js":"8"},{"size":500,"mtime":1611680299945,"results":"9","hashOfConfig":"10"},{"size":699,"mtime":1611755114653,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1611680299947,"results":"12","hashOfConfig":"10"},{"size":1401,"mtime":1614107840419,"results":"13","hashOfConfig":"10"},{"size":2331,"mtime":1611754977732,"results":"14","hashOfConfig":"10"},{"size":282,"mtime":1611720188776,"results":"15","hashOfConfig":"10"},{"size":284,"mtime":1614107874979,"results":"16","hashOfConfig":"10"},{"size":390,"mtime":1611706390078,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1hj1m88",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/index.js",[],["36","37"],"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/App.js",[],"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/reportWebVitals.js",[],"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/components/login.js",[],"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/components/friendList.js",["38","39"],"import React, { useState, useEffect } from \"react\";\nimport Friend from \"../components/friends\";\nimport { axiosWithAuth } from \"./../utils/axiosWithAuth\";\n\nconst initialFormValues = {\n  name: \"\",\n  age: null,\n  email: \"\",\n};\nconst initialState = [];\n\nexport function GetFriends(props) {\n  const [friendList, setFriendList] = useState(initialState);\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const token = localStorage.getItem(\"token\");\n\n  const handleChange = (e) => {\n    setFormValues({\n      ...formValues,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axiosWithAuth()\n      .post(\"http://localhost:5000/api/friends\", formValues)\n      .then((res) => {\n        setFriendList(res.data);\n        console.table(res.data, \"posted friend\");\n      });\n  };\n\n  useEffect(async () => {\n    try {\n      const { data } = await axiosWithAuth().get(\n        \"http://localhost:5000/api/friends\"\n      );\n      setFriendList(data);\n      console.table(data);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  return (\n    <div className=\"totalContainer\">\n      <div className=\"input\">\n        <h1>Friend list</h1>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              value={formValues.name}\n            />\n          </label>\n          <br></br>\n          <label>\n            Age:\n            <input\n              type=\"text\"\n              name=\"age\"\n              onChange={handleChange}\n              value={formValues.age}\n            />\n          </label>\n          <br></br>\n          <label>\n            Email:\n            <input\n              type=\"text\"\n              name=\"email\"\n              onChange={handleChange}\n              value={formValues.email}\n            />\n          </label>\n          <br></br>\n          <button className=\"button\">\n            <span>Add New Friend </span>\n          </button>\n          <h4>Hover over cards to reveal friends</h4>\n        </form>\n      </div>\n      <div className=\"cardContainer\">\n        {friendList.map((friend) => {\n          return <Friend friend={friend} />;\n        })}\n      </div>\n    </div>\n  );\n}\nexport default GetFriends;\n","/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/components/friends.js",[],"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/utils/axiosWithAuth.js",[],"/Users/danielwright/Desktop/unit3/Auth-Friends/friends/src/utils/PrivateRoute.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":15,"column":9,"nodeType":"46","messageId":"47","endLine":15,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":33,"column":13,"nodeType":"50","endLine":43,"endColumn":4},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]